// Generated by CoffeeScript 2.1.0
(function() {
  var AllCustomerReviewsPage, ReviewDesktopPage, ReviewMobilePage, _, async, getReview, getReviewIds, getReviews;

  _ = require('underscore');

  async = require('async');

  AllCustomerReviewsPage = require('./page/AllCustomerReviewsPage');

  ReviewMobilePage = require('./page/ReviewMobilePage');

  ReviewDesktopPage = require('./page/ReviewDesktopPage');

  //### retrieve review IDs by a productId.
  getReviewIds = (options, callback) => {
    var lastReviewIds, results, reviewIds, test;
    reviewIds = [];
    lastReviewIds = [];
    options.pageNumber = 1;
    test = function() {
      return lastReviewIds != null ? lastReviewIds.length : void 0;
    };
    results = function() {
      return callback(null, reviewIds);
    };
    return async.doWhilst((cb) => {
      var allCustomerReviewsPage;
      return allCustomerReviewsPage = new AllCustomerReviewsPage(options).load(function(err) {
        if (err) {
          return cb(err);
        }
        lastReviewIds = allCustomerReviewsPage.getReviewIds();
        reviewIds = reviewIds.concat(lastReviewIds);
        options.pageNumber++;
        return cb(null);
      });
    }, test, results);
  };

  //### retrieve a review by productId and reviewId.
  getReview = (options, callback) => {
    var reviewMobilePage;
    return reviewMobilePage = new ReviewMobilePage(options).load(function(err) {
      var review, reviewDesktopPage;
      if (err != null) {
        return callback(err);
      }
      review = reviewMobilePage.parse();
      return reviewDesktopPage = new ReviewDesktopPage(options).load(function(err) {
        if (!err) {
          // return callback err if err?
          _.defaults(review, reviewDesktopPage.parse());
        }
        return callback(null, review);
      });
    });
  };

  //### retrieve reviews by a productId.
  getReviews = ({productId}, callback) => {
    return getReviewIds({productId}, function(err, reviewIds) {
      return async.concatSeries(reviewIds, function(reviewId, callback) {
        return getReview({productId, reviewId}, callback);
      }, (err, reviews) => {
        return callback(err, reviews);
      });
    });
  };

  module.exports = {
    getReviewIds: getReviewIds,
    getReview: getReview,
    getReviews: getReviews
  };

}).call(this);
